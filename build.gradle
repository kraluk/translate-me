plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.jetbrains.intellij' version '0.2.7'
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
}

sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion

group pluginGroup
version = pluginVersion

sourceSets {
    integration {
        java.srcDir project.file('src/integration/java')
        groovy.srcDir project.file('src/integration/groovy')

        resources.srcDir project.file('src/integration/resources')
        resources.srcDir project.sourceSets.test.resources
        resources.srcDir project.sourceSets.main.resources

        compileClasspath = project.sourceSets.main.output +
                project.sourceSets.test.output +
                project.configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

intellij {
    version ideaVersion
    type ideaType
    pluginName pluginName
    downloadSources Boolean.valueOf(sources)
    sameSinceUntilBuild Boolean.valueOf(isEAP)
    alternativeIdePath idePath
    updateSinceUntilBuild false
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

dependencies {

    runtime group: 'com.google.guava', name: 'guava', version: '19.0'

    // Test dependencies
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.6'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.objenesis', name: 'objenesis', version: '2.5.1'

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4-rc-4") {
        exclude module: "groovy-all"
    }
}

project.configurations {
    integration {
        extendsFrom project.configurations.testRuntime
        description = 'Dependencies for integration tests'
        transitive = true
        visible = true
    }
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

task integrationTest(type: Test) {
    testClassesDir = project.sourceSets.integration.output.classesDir
    classpath = project.sourceSets.main.output +
            project.sourceSets.test.output +
            project.sourceSets.integration.runtimeClasspath +
            project.configurations.testRuntime +
            project.configurations.integrationRuntime

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}